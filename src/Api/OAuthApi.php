<?php
/**
 * OAuthApi
 * PHP version 7.3
 *
 * @category Class
 * @author   OpenAPI Generator team
 * @see     https://openapi-generator.tech
 */

/**
 * HelloSign API
 *
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HelloSignSDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise;
use GuzzleHttp\Psr7;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Utils;
use HelloSignSDK\ApiException;
use HelloSignSDK\Configuration;
use HelloSignSDK\HeaderSelector;
use HelloSignSDK\Model;
use HelloSignSDK\ObjectSerializer;
use InvalidArgumentException;
use RuntimeException;

/**
 * OAuthApi Class Doc Comment
 *
 * @category Class
 * @author   OpenAPI Generator team
 * @see     https://openapi-generator.tech
 */
class OAuthApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation oauthTokenGenerate
     *
     * OAuth Token Generate
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://app.hellosign.com
     *
     * @param Model\OAuthTokenGenerateRequest $o_auth_token_generate_request o_auth_token_generate_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\OAuthTokenResponse
     */
    public function oauthTokenGenerate(Model\OAuthTokenGenerateRequest $o_auth_token_generate_request)
    {
        list($response) = $this->oauthTokenGenerateWithHttpInfo($o_auth_token_generate_request);

        return $response;
    }

    /**
     * Operation oauthTokenGenerateWithHttpInfo
     *
     * OAuth Token Generate
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://app.hellosign.com
     *
     * @param Model\OAuthTokenGenerateRequest $o_auth_token_generate_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\OAuthTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function oauthTokenGenerateWithHttpInfo(Model\OAuthTokenGenerateRequest $o_auth_token_generate_request)
    {
        $request = $this->oauthTokenGenerateRequest($o_auth_token_generate_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\HelloSignSDK\Model\OAuthTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\OAuthTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\HelloSignSDK\Model\OAuthTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HelloSignSDK\Model\OAuthTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oauthTokenGenerateAsync
     *
     * OAuth Token Generate
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://app.hellosign.com
     *
     * @param Model\OAuthTokenGenerateRequest $o_auth_token_generate_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function oauthTokenGenerateAsync(Model\OAuthTokenGenerateRequest $o_auth_token_generate_request)
    {
        return $this->oauthTokenGenerateAsyncWithHttpInfo($o_auth_token_generate_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oauthTokenGenerateAsyncWithHttpInfo
     *
     * OAuth Token Generate
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://app.hellosign.com
     *
     * @param Model\OAuthTokenGenerateRequest $o_auth_token_generate_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function oauthTokenGenerateAsyncWithHttpInfo(Model\OAuthTokenGenerateRequest $o_auth_token_generate_request)
    {
        $returnType = '\HelloSignSDK\Model\OAuthTokenResponse';
        $request = $this->oauthTokenGenerateRequest($o_auth_token_generate_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oauthTokenGenerate'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://app.hellosign.com
     *
     * @param Model\OAuthTokenGenerateRequest $o_auth_token_generate_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function oauthTokenGenerateRequest(Model\OAuthTokenGenerateRequest $o_auth_token_generate_request)
    {
        // verify the required parameter 'o_auth_token_generate_request' is set
        if ($o_auth_token_generate_request === null || (is_array($o_auth_token_generate_request) && count($o_auth_token_generate_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $o_auth_token_generate_request when calling oauthTokenGenerate'
            );
        }

        $resourcePath = '/oauth/token';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        [$formParams, $multipart] = $this->getFormParams(
            $o_auth_token_generate_request
        );

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($o_auth_token_generate_request));
            } else {
                $httpBody = $o_auth_token_generate_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ['https://app.hellosign.com'];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than " . sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oauthTokenRefresh
     *
     * OAuth Token Refresh
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://app.hellosign.com
     *
     * @param Model\OAuthTokenRefreshRequest $o_auth_token_refresh_request o_auth_token_refresh_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\OAuthTokenResponse
     */
    public function oauthTokenRefresh(Model\OAuthTokenRefreshRequest $o_auth_token_refresh_request)
    {
        list($response) = $this->oauthTokenRefreshWithHttpInfo($o_auth_token_refresh_request);

        return $response;
    }

    /**
     * Operation oauthTokenRefreshWithHttpInfo
     *
     * OAuth Token Refresh
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://app.hellosign.com
     *
     * @param Model\OAuthTokenRefreshRequest $o_auth_token_refresh_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\OAuthTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function oauthTokenRefreshWithHttpInfo(Model\OAuthTokenRefreshRequest $o_auth_token_refresh_request)
    {
        $request = $this->oauthTokenRefreshRequest($o_auth_token_refresh_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\HelloSignSDK\Model\OAuthTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\OAuthTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\HelloSignSDK\Model\OAuthTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HelloSignSDK\Model\OAuthTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oauthTokenRefreshAsync
     *
     * OAuth Token Refresh
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://app.hellosign.com
     *
     * @param Model\OAuthTokenRefreshRequest $o_auth_token_refresh_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function oauthTokenRefreshAsync(Model\OAuthTokenRefreshRequest $o_auth_token_refresh_request)
    {
        return $this->oauthTokenRefreshAsyncWithHttpInfo($o_auth_token_refresh_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oauthTokenRefreshAsyncWithHttpInfo
     *
     * OAuth Token Refresh
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://app.hellosign.com
     *
     * @param Model\OAuthTokenRefreshRequest $o_auth_token_refresh_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function oauthTokenRefreshAsyncWithHttpInfo(Model\OAuthTokenRefreshRequest $o_auth_token_refresh_request)
    {
        $returnType = '\HelloSignSDK\Model\OAuthTokenResponse';
        $request = $this->oauthTokenRefreshRequest($o_auth_token_refresh_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oauthTokenRefresh'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://app.hellosign.com
     *
     * @param Model\OAuthTokenRefreshRequest $o_auth_token_refresh_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function oauthTokenRefreshRequest(Model\OAuthTokenRefreshRequest $o_auth_token_refresh_request)
    {
        // verify the required parameter 'o_auth_token_refresh_request' is set
        if ($o_auth_token_refresh_request === null || (is_array($o_auth_token_refresh_request) && count($o_auth_token_refresh_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $o_auth_token_refresh_request when calling oauthTokenRefresh'
            );
        }

        $resourcePath = '/oauth/token?refresh';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        [$formParams, $multipart] = $this->getFormParams(
            $o_auth_token_refresh_request
        );

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($o_auth_token_refresh_request));
            } else {
                $httpBody = $o_auth_token_refresh_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ['https://app.hellosign.com'];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than " . sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Allows a multipart/form-data request to grab data from the typed
     * class created by OpenAPI.
     */
    protected function getFormParams(Model\ModelInterface $model): array
    {
        $apiTypes = $model::openAPITypes();
        $formParams = [];
        $multipart = false;

        $key_count = [];
        foreach ($model::attributeMap() as $key => $_) {
            // form params
            $value = $model->offsetGet($key);

            if ($value === null) {
                continue;
            }

            $true_key = $key;

            if (strpos($apiTypes[$key], 'SplFileObject') !== false) {
                $multi = false;
                if (strpos($apiTypes[$key], 'SplFileObject[]') !== false) {
                    if (!array_key_exists($key, $key_count)) {
                        $key_count[$key] = 0;
                    }

                    $multi = true;
                }

                $file = $value;
                $multipart = true;
                $paramFiles = is_array($file) ? $file : [$file];
                foreach ($paramFiles as $paramFile) {
                    if ($multi) {
                        // flat convert nested arrays into flat arrays, but making
                        // the literal [] a part of key value
                        $true_key = "{$key}[{$key_count[$key]}]";
                        $key_count[$key]++;

                        $formParams[$true_key] = Psr7\Utils::tryFopen(
                            ObjectSerializer::toFormValue($paramFile),
                            'rb'
                        );

                        continue;
                    }

                    $formParams[$true_key][] = Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
                }

                continue;
            }

            $formParams[$true_key] = is_scalar($value)
                ? ObjectSerializer::toFormValue($value)
                : Utils::jsonEncode(
                    ObjectSerializer::sanitizeForSerialization(
                        $value
                    )
                );
        }

        return [$formParams, $multipart];
    }

    /**
     * Create http client option
     *
     * @throws RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = $this->config->getOptions();
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
